# WARN: this schema is out of date! see https://github.com/reearth/reearth-cms/blob/main/server/schemas/integration.yml
components:
  parameters:
    assetIdParam:
      description: ID of the selected asset
      in: path
      name: assetId
      required: true
      schema:
        type: string
    assetParam:
      description: Specifies whether asset data are embedded in the results
      in: query
      name: asset
      schema:
        $ref: '#/components/schemas/assetEmbedding'
    commentIdParam:
      description: ID of the selected comment
      in: path
      name: commentId
      required: true
      schema:
        type: string
    itemIdParam:
      description: ID of the selected item
      in: path
      name: itemId
      required: true
      schema:
        type: string
    modelIdOrKeyParam:
      description: ID or key of the model in the project
      in: path
      name: modelIdOrKey
      required: true
      schema:
        type: string
    modelIdParam:
      description: ID of the model in the project
      in: path
      name: modelId
      required: true
      schema:
        type: string
    pageParam:
      description: Used to select the page
      in: query
      name: page
      required: false
      schema:
        default: 1
        minimum: 1
        type: integer
    perPageParam:
      description: Used to select the page
      in: query
      name: perPage
      required: false
      schema:
        default: 50
        maximum: 100
        minimum: 1
        type: integer
    projectIdOrAliasParam:
      description: ID or alias of the project
      in: path
      name: projectIdOrAlias
      required: true
      schema:
        type: string
    projectIdParam:
      description: ID of the selected project within the selected workspace
      in: path
      name: projectId
      required: true
      schema: {}
    refParam:
      description: Used to select a ref or ver
      in: query
      name: ref
      required: false
      schema:
        default: latest
        enum:
        - latest
        - public
        type: string
    sortDirParam:
      description: Used to define the order direction of the response list, will be
        ignored if the order is not presented
      in: query
      name: dir
      required: false
      schema:
        default: desc
        enum:
        - asc
        - desc
        type: string
    sortParam:
      description: Used to define the order of the response list
      in: query
      name: sort
      required: false
      schema:
        default: createdAt
        enum:
        - createdAt
        - updatedAt
        type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    asset:
      properties:
        archiveExtractionStatus:
          enum:
          - pending
          - in_progress
          - done
          - failed
          type: string
        contentType:
          type: string
        createdAt:
          format: date-time
          type: string
        file:
          $ref: '#/components/schemas/file'
        id:
          type: string
        name:
          type: string
        previewType:
          enum:
          - image
          - image_svg
          - geo
          - geo_3d_Tiles
          - geo_mvt
          - model_3d
          - unknown
          type: string
        projectId:
          type: string
        totalSize:
          type: number
        updatedAt:
          format: date-time
          type: string
        url:
          type: string
      required:
      - id
      - projectId
      - url
      - createdAt
      - updatedAt
      type: object
    assetEmbedding:
      enum:
      - all
      - "true"
      - "false"
      type: string
    comment:
      properties:
        authorId:
          type: string
        authorType:
          enum:
          - user
          - integrtaion
          type: string
        content:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
      type: object
    field:
      properties:
        group:
          type: string
        id:
          type: string
        key:
          type: string
        type:
          $ref: '#/components/schemas/valueType'
        value: {}
      type: object
    file:
      properties:
        children:
          items:
            $ref: '#/components/schemas/file'
          type: array
        contentType:
          type: string
        name:
          type: string
        path:
          type: string
        size:
          type: number
      type: object
    item:
      properties:
        createdAt:
          format: date-time
          type: string
        fields:
          items:
            $ref: '#/components/schemas/field'
          type: array
        id:
          type: string
        metadataItemId:
          type: string
        modelId:
          type: string
        originalItemId:
          type: string
        updatedAt:
          format: date-time
          type: string
      type: object
    model:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        key:
          type: string
        lastModified:
          format: date-time
          type: string
        metadataSchemaId:
          type: string
        name:
          type: string
        projectId:
          type: string
        public:
          type: boolean
        schemaId:
          type: string
        updatedAt:
          format: date-time
          type: string
      type: object
    refOrVersion:
      properties:
        ref:
          enum:
          - latest
          - public
          type: string
        version:
          format: uuid
          type: string
      type: object
    schema:
      properties:
        TitleField:
          type: string
        createdAt:
          format: date-time
          type: string
        fields:
          items:
            $ref: '#/components/schemas/schemaField'
          type: array
        id:
          type: string
        projectId:
          type: string
      type: object
    schemaField:
      properties:
        id:
          type: string
        key:
          type: string
        required:
          type: boolean
        type:
          $ref: '#/components/schemas/valueType'
      type: object
    tagResponse:
      properties:
        color:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    valueType:
      enum:
      - text
      - textArea
      - richText
      - markdown
      - asset
      - date
      - bool
      - select
      - tag
      - integer
      - reference
      - url
      - group
      - tag
      type: string
    version:
      properties:
        parents:
          items:
            format: uuid
            type: string
          type: array
        refs:
          items:
            format: uuid
            type: string
          type: array
        version:
          format: uuid
          type: string
      type: object
    versionedItem:
      properties:
        createdAt:
          format: date-time
          type: string
        fields:
          items:
            $ref: '#/components/schemas/field'
          type: array
        id:
          type: string
        metadataFields:
          items:
            $ref: '#/components/schemas/field'
          type: array
        modelId:
          type: string
        parents:
          items:
            format: uuid
            type: string
          type: array
        referencedItems:
          items:
            $ref: '#/components/schemas/versionedItem'
          type: array
        refs:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        version:
          format: uuid
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
info:
  description: ReEarth-CMS Integration API
  title: ReEarth-CMS Integration API
  version: 1.0.0
openapi: 3.0.3
paths:
  /assets/{assetId}:
    delete:
      operationId: AssetDelete
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                type: object
          description: assets list
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      tags:
      - Assets
    get:
      operationId: AssetGet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset'
          description: assets list
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      tags:
      - Assets
    parameters:
    - $ref: '#/components/parameters/assetIdParam'
  /assets/{assetId}/comments:
    get:
      operationId: AssetCommentList
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  comments:
                    items:
                      $ref: '#/components/schemas/comment'
                    type: array
                type: object
          description: asset comments list
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      tags:
      - Assets comments
    parameters:
    - $ref: '#/components/parameters/assetIdParam'
    post:
      operationId: AssetCommentCreate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                content:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
          description: ""
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      tags:
      - Assets comments
  /assets/{assetId}/comments/{commentId}:
    delete:
      operationId: AssetCommentDelete
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                type: object
          description: delete an asset comment
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      tags:
      - Assets comments
    parameters:
    - $ref: '#/components/parameters/assetIdParam'
    - $ref: '#/components/parameters/commentIdParam'
    patch:
      description: ""
      operationId: AssetCommentUpdate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                content:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
          description: Update An asset comment
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: Update AssetComment
      tags:
      - Assets comments
  /items/{itemId}:
    delete:
      operationId: ItemDelete
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                type: object
          description: delete an item
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: delete an item
      tags:
      - Items
    get:
      description: Returns an item.
      operationId: ItemGet
      parameters:
      - $ref: '#/components/parameters/refParam'
      - $ref: '#/components/parameters/assetParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionedItem'
          description: An item
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns an items.
      tags:
      - Items
    parameters:
    - $ref: '#/components/parameters/itemIdParam'
    patch:
      description: Update an item.
      operationId: ItemUpdate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                asset:
                  $ref: '#/components/schemas/assetEmbedding'
                fields:
                  items:
                    $ref: '#/components/schemas/field'
                  type: array
                metadataFields:
                  items:
                    $ref: '#/components/schemas/field'
                  type: array
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionedItem'
          description: An item
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Update an item.
      tags:
      - Items
  /items/{itemId}/comments:
    get:
      operationId: ItemCommentList
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  comments:
                    items:
                      $ref: '#/components/schemas/comment'
                    type: array
                type: object
          description: item comments list
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      tags:
      - Items comments
    parameters:
    - $ref: '#/components/parameters/itemIdParam'
    post:
      operationId: ItemCommentCreate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                content:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
          description: ""
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      tags:
      - Items comments
  /items/{itemId}/comments/{commentId}:
    delete:
      operationId: ItemCommentDelete
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                type: object
          description: delete an item comment
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      tags:
      - Items comments
    parameters:
    - $ref: '#/components/parameters/itemIdParam'
    - $ref: '#/components/parameters/commentIdParam'
    patch:
      description: ""
      operationId: ItemCommentUpdate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                content:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
          description: Update An item comment
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: Update Item Comment
      tags:
      - Items comments
  /models/{modelId}:
    get:
      description: Returns a model.
      operationId: ModelGet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a model.
      tags:
      - Models
    parameters:
    - $ref: '#/components/parameters/modelIdParam'
  /models/{modelId}/items:
    get:
      description: Returns a list of items with filtering and ordering.
      operationId: ItemFilter
      parameters:
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/sortDirParam'
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
      - $ref: '#/components/parameters/refParam'
      - $ref: '#/components/parameters/assetParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/versionedItem'
                    type: array
                  page:
                    minimum: 1
                    type: integer
                  perPage:
                    minimum: 1
                    type: integer
                  totalCount:
                    minimum: 0
                    type: integer
                type: object
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a list of items.
      tags:
      - Items
    parameters:
    - $ref: '#/components/parameters/modelIdParam'
    post:
      operationId: ItemCreate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                fields:
                  items:
                    $ref: '#/components/schemas/field'
                  type: array
                metadataFields:
                  items:
                    $ref: '#/components/schemas/field'
                  type: array
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionedItem'
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
      summary: create an item
      tags:
      - Items
  /projects/{projectId}/assets:
    get:
      description: Returns a list of assets with filtering and ordering.
      operationId: AssetFilter
      parameters:
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/sortDirParam'
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/asset'
                    type: array
                  page:
                    minimum: 1
                    type: integer
                  perPage:
                    minimum: 1
                    type: integer
                  totalCount:
                    minimum: 0
                    type: integer
                type: object
          description: assets list
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: Returns a list of assets.
      tags:
      - Assets project
    parameters:
    - $ref: '#/components/parameters/projectIdParam'
    post:
      description: Create a new asset and return the created asset.
      operationId: AssetCreate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                skipDecompression:
                  default: false
                  nullable: true
                  type: boolean
                url:
                  type: string
              type: object
          multipart/form-data:
            schema:
              properties:
                file:
                  format: binary
                  type: string
                skipDecompression:
                  default: false
                  type: boolean
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset'
          description: assets list
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: Create an new asset.
      tags:
      - Assets project
  /projects/{projectIdOrAlias}/models/{modelIdOrKey}:
    get:
      description: Returns a model.
      operationId: ModelGetWithProject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a model.
      tags:
      - Models
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/modelIdOrKeyParam'
  /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items:
    get:
      description: Returns a list of items with filtering and ordering.
      operationId: ItemFilterWithProject
      parameters:
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/sortDirParam'
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
      - $ref: '#/components/parameters/refParam'
      - $ref: '#/components/parameters/assetParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/versionedItem'
                    type: array
                  page:
                    minimum: 1
                    type: integer
                  perPage:
                    minimum: 1
                    type: integer
                  totalCount:
                    minimum: 0
                    type: integer
                type: object
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a list of items.
      tags:
      - Items project
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/modelIdOrKeyParam'
    post:
      operationId: ItemCreateWithProject
      requestBody:
        content:
          application/json:
            schema:
              properties:
                fields:
                  items:
                    $ref: '#/components/schemas/field'
                  type: array
                metadataFields:
                  items:
                    $ref: '#/components/schemas/field'
                  type: array
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionedItem'
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
      tags:
      - Items project
