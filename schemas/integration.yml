components:
  parameters:
    assetIdParam:
      description: ID of the selected asset
      in: path
      name: assetId
      required: true
      schema:
        type: string
    assetParam:
      description: Specifies whether asset data are embedded in the results
      in: query
      name: asset
      schema:
        $ref: '#/components/schemas/assetEmbedding'
    commentIdParam:
      description: ID of the selected comment
      in: path
      name: commentId
      required: true
      schema:
        type: string
    fieldIdOrKeyParam:
      description: ID or key of the field in the models schema
      in: path
      name: fieldIdOrKey
      required: true
      schema:
        type: string
    fieldIdParam:
      description: ID of the field in the models schema
      in: path
      name: fieldId
      required: true
      schema:
        type: string
    itemIdParam:
      description: ID of the selected item
      in: path
      name: itemId
      required: true
      schema:
        type: string
    keywordParam:
      description: keyword string
      in: query
      name: keyword
      required: false
      schema:
        type: string
    modelIdOrKeyParam:
      description: ID or key of the model in the project
      in: path
      name: modelIdOrKey
      required: true
      schema:
        type: string
    modelIdParam:
      description: ID of the model in the project
      in: path
      name: modelId
      required: true
      schema:
        type: string
    pageParam:
      description: Used to select the page
      in: query
      name: page
      required: false
      schema:
        default: 1
        minimum: 1
        type: integer
    perPageParam:
      description: Used to select the page
      in: query
      name: perPage
      required: false
      schema:
        default: 50
        maximum: 100
        minimum: 1
        type: integer
    projectIdOrAliasParam:
      description: ID or alias of the project
      in: path
      name: projectIdOrAlias
      required: true
      schema:
        type: string
    projectIdParam:
      description: ID of the selected project
      in: path
      name: projectId
      required: true
      schema: {}
    refParam:
      description: Used to select a ref or ver
      in: query
      name: ref
      required: false
      schema:
        default: latest
        enum:
        - latest
        - public
        type: string
    schemaIdParam:
      description: ID of the schema in the model
      in: path
      name: schemaId
      required: true
      schema:
        type: string
    sortDirParam:
      description: Used to define the order direction of the response list, will be
        ignored if the order is not presented
      in: query
      name: dir
      required: false
      schema:
        default: desc
        enum:
        - asc
        - desc
        type: string
    sortParam:
      description: Used to define the order of the response list
      in: query
      name: sort
      required: false
      schema:
        default: createdAt
        enum:
        - createdAt
        - updatedAt
        type: string
    workspaceIdParam:
      description: ID of the selected workspace
      in: path
      name: workspaceId
      required: true
      schema: {}
  responses:
    NotFoundError:
      description: The requested resource was not found
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    Feature:
      properties:
        geometry:
          $ref: '#/components/schemas/Geometry'
        id:
          type: string
        properties:
          type: object
        type:
          enum:
          - Feature
          type: string
      type: object
    FeatureCollection:
      properties:
        features:
          items:
            $ref: '#/components/schemas/Feature'
          type: array
        type:
          enum:
          - FeatureCollection
          type: string
      type: object
    GeoJSON:
      $ref: '#/components/schemas/FeatureCollection'
    Geometry:
      properties:
        coordinates:
          oneOf:
          - $ref: '#/components/schemas/Point'
          - $ref: '#/components/schemas/MultiPoint'
          - $ref: '#/components/schemas/LineString'
          - $ref: '#/components/schemas/MultiLineString'
          - $ref: '#/components/schemas/Polygon'
          - $ref: '#/components/schemas/MultiPolygon'
        geometries:
          items:
            $ref: '#/components/schemas/Geometry'
          type: array
        type:
          enum:
          - Point
          - MultiPoint
          - LineString
          - MultiLineString
          - Polygon
          - MultiPolygon
          - GeometryCollection
          type: string
      type: object
    GeometryCollection:
      properties:
        geometries:
          items:
            $ref: '#/components/schemas/Geometry'
          type: array
        type:
          enum:
          - GeometryCollection
          type: string
      type: object
    LineString:
      items:
        $ref: '#/components/schemas/Point'
      minItems: 2
      type: array
    MultiLineString:
      items:
        $ref: '#/components/schemas/LineString'
      type: array
    MultiPoint:
      items:
        $ref: '#/components/schemas/Point'
      type: array
    MultiPolygon:
      items:
        $ref: '#/components/schemas/Polygon'
      type: array
    Point:
      items:
        format: double
        type: number
      maxItems: 3
      minItems: 2
      type: array
    Polygon:
      items:
        items:
          $ref: '#/components/schemas/Point'
        type: array
      minItems: 4
      type: array
    asset:
      properties:
        archiveExtractionStatus:
          enum:
          - pending
          - in_progress
          - done
          - failed
          type: string
        contentType:
          type: string
        createdAt:
          format: date-time
          type: string
        file:
          $ref: '#/components/schemas/file'
        id:
          type: string
        name:
          type: string
        previewType:
          enum:
          - image
          - image_svg
          - geo
          - geo_3d_Tiles
          - geo_mvt
          - model_3d
          - csv
          - unknown
          type: string
        projectId:
          type: string
        totalSize:
          type: number
        updatedAt:
          format: date-time
          type: string
        url:
          type: string
      required:
      - id
      - projectId
      - url
      - createdAt
      - updatedAt
      type: object
    assetEmbedding:
      enum:
      - all
      - "true"
      - "false"
      type: string
    comment:
      properties:
        authorId:
          type: string
        authorType:
          enum:
          - user
          - integrtaion
          type: string
        content:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
      type: object
    condition:
      properties:
        and:
          items:
            $ref: '#/components/schemas/condition'
          type: array
        basic:
          properties:
            fieldId:
              $ref: '#/components/schemas/fieldSelector'
            operator:
              enum:
              - equals
              - notEquals
              type: string
            value: {}
          type: object
        bool:
          properties:
            fieldId:
              $ref: '#/components/schemas/fieldSelector'
            operator:
              enum:
              - equals
              - notEquals
              type: string
            value:
              type: boolean
          required:
          - fieldId
          - operator
          - value
          type: object
        multiple:
          properties:
            fieldId:
              $ref: '#/components/schemas/fieldSelector'
            operator:
              enum:
              - includesAny
              - notIncludesAny
              - includesAll
              - notIncludesAll
              type: string
            value:
              items: {}
              type: array
          required:
          - fieldId
          - operator
          - value
          type: object
        nullable:
          properties:
            fieldId:
              $ref: '#/components/schemas/fieldSelector'
            operator:
              enum:
              - empty
              - notEmpty
              type: string
          type: object
        number:
          properties:
            fieldId:
              $ref: '#/components/schemas/fieldSelector'
            operator:
              enum:
              - greaterThan
              - lessThan
              - greaterThanOrEqualTo
              - lessThanOrEqualTo
              type: string
            value:
              type: number
          required:
          - fieldId
          - operator
          - value
          type: object
        or:
          items:
            $ref: '#/components/schemas/condition'
          type: array
        string:
          properties:
            fieldId:
              $ref: '#/components/schemas/fieldSelector'
            operator:
              enum:
              - contains
              - notContains
              - startsWith
              - endsWith
              - notStartsWith
              - notEndsWith
              type: string
            value:
              type: string
          required:
          - fieldId
          - operator
          - value
          type: object
        time:
          properties:
            fieldId:
              $ref: '#/components/schemas/fieldSelector'
            operator:
              enum:
              - before
              - after
              - beforeOrOn
              - afterOrOn
              - ofThisWeek
              - ofThisMonth
              - ofThisYear
              type: string
            value:
              format: date-time
              type: string
          required:
          - fieldId
          - operator
          - value
          type: object
      type: object
    field:
      properties:
        group:
          type: string
        id:
          type: string
        key:
          type: string
        type:
          $ref: '#/components/schemas/valueType'
        value: {}
      type: object
    fieldSelector:
      properties:
        fieldId:
          type: string
        type:
          enum:
          - id
          - creationDate
          - creationUser
          - modificationDate
          - modificationUser
          - status
          - field
          - metaField
          type: string
      type: object
    file:
      properties:
        children:
          items:
            $ref: '#/components/schemas/file'
          type: array
        contentType:
          type: string
        name:
          type: string
        path:
          type: string
        size:
          type: number
      type: object
    item:
      properties:
        createdAt:
          format: date-time
          type: string
        fields:
          items:
            $ref: '#/components/schemas/field'
          type: array
        id:
          type: string
        isMetadata:
          type: boolean
        metadataItemId:
          type: string
        modelId:
          type: string
        originalItemId:
          type: string
        updatedAt:
          format: date-time
          type: string
      type: object
    model:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        key:
          type: string
        lastModified:
          format: date-time
          type: string
        metadataSchema:
          $ref: '#/components/schemas/schema'
        metadataSchemaId:
          type: string
        name:
          type: string
        projectId:
          type: string
        public:
          type: boolean
        schema:
          $ref: '#/components/schemas/schema'
        schemaId:
          type: string
        updatedAt:
          format: date-time
          type: string
      type: object
    project:
      properties:
        alias:
          type: string
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        updatedAt:
          format: date-time
          type: string
        workspaceId:
          type: string
      type: object
    refOrVersion:
      properties:
        ref:
          enum:
          - latest
          - public
          type: string
        version:
          format: uuid
          type: string
      type: object
    schema:
      properties:
        createdAt:
          format: date-time
          type: string
        fields:
          items:
            $ref: '#/components/schemas/schemaField'
          type: array
        id:
          type: string
        projectId:
          type: string
        titleField:
          type: string
      type: object
    schemaField:
      properties:
        id:
          type: string
        key:
          type: string
        multiple:
          type: boolean
        required:
          type: boolean
        type:
          $ref: '#/components/schemas/valueType'
      type: object
    schemaJSON:
      properties:
        $id:
          type: string
        $schema:
          type: string
        description:
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/schemaJSONProperties'
          type: object
        title:
          type: string
        type:
          type: string
      required:
      - type
      - properties
      type: object
    schemaJSONProperties:
      properties:
        description:
          type: string
        format:
          type: string
        items:
          $ref: '#/components/schemas/schemaJSON'
        maxLength:
          type: integer
        maximum:
          format: double
          type: number
        minimum:
          format: double
          type: number
        title:
          type: string
        type:
          type: string
      required:
      - type
      type: object
    tagResponse:
      properties:
        color:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    valueType:
      enum:
      - text
      - textArea
      - richText
      - markdown
      - checkbox
      - asset
      - date
      - bool
      - select
      - integer
      - number
      - reference
      - url
      - group
      - tag
      - geometryObject
      - geometryEditor
      type: string
    version:
      properties:
        parents:
          items:
            format: uuid
            type: string
          type: array
        refs:
          items:
            format: uuid
            type: string
          type: array
        version:
          format: uuid
          type: string
      type: object
    versionedItem:
      properties:
        createdAt:
          format: date-time
          type: string
        fields:
          items:
            $ref: '#/components/schemas/field'
          type: array
        id:
          type: string
        isMetadata:
          type: boolean
        metadataFields:
          items:
            $ref: '#/components/schemas/field'
          type: array
        modelId:
          type: string
        parents:
          items:
            format: uuid
            type: string
          type: array
        referencedItems:
          items:
            $ref: '#/components/schemas/versionedItem'
          type: array
        refs:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        version:
          format: uuid
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
info:
  description: ReEarth-CMS Integration API
  title: ReEarth-CMS Integration API
  version: 1.0.0
openapi: 3.0.3
paths:
  /{workspaceId}/projects:
    get:
      description: Returns a list of projects
      operationId: ProjectFilter
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  page:
                    minimum: 1
                    type: integer
                  perPage:
                    minimum: 1
                    type: integer
                  projects:
                    items:
                      $ref: '#/components/schemas/project'
                    type: array
                  totalCount:
                    minimum: 0
                    type: integer
                type: object
          description: A JSON array of projects
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a list of projects.
      tags:
      - Projects
    parameters:
    - $ref: '#/components/parameters/workspaceIdParam'
    - $ref: '#/components/parameters/pageParam'
    - $ref: '#/components/parameters/perPageParam'
  /assets/{assetId}:
    delete:
      operationId: AssetDelete
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                type: object
          description: assets list
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      summary: delete asset
      tags:
      - Assets
    get:
      operationId: AssetGet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset'
          description: assets list
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      summary: get asset
      tags:
      - Assets
    parameters:
    - $ref: '#/components/parameters/assetIdParam'
  /assets/{assetId}/comments:
    get:
      operationId: AssetCommentList
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  comments:
                    items:
                      $ref: '#/components/schemas/comment'
                    type: array
                type: object
          description: asset comments list
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: get asset comments
      tags:
      - Assets comments
    parameters:
    - $ref: '#/components/parameters/assetIdParam'
    post:
      operationId: AssetCommentCreate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                content:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
          description: ""
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: create asset comments
      tags:
      - Assets comments
  /assets/{assetId}/comments/{commentId}:
    delete:
      operationId: AssetCommentDelete
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                type: object
          description: delete an asset comment
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: delete asset comments
      tags:
      - Assets comments
    parameters:
    - $ref: '#/components/parameters/assetIdParam'
    - $ref: '#/components/parameters/commentIdParam'
    patch:
      description: ""
      operationId: AssetCommentUpdate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                content:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
          description: Update An asset comment
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: Update AssetComment
      tags:
      - Assets comments
  /items/{itemId}:
    delete:
      operationId: ItemDelete
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                type: object
          description: delete an item
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: delete an item
      tags:
      - Items
    get:
      description: Returns an item.
      operationId: ItemGet
      parameters:
      - $ref: '#/components/parameters/refParam'
      - $ref: '#/components/parameters/assetParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionedItem'
          description: An item
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns an item.
      tags:
      - Items
    parameters:
    - $ref: '#/components/parameters/itemIdParam'
    patch:
      description: Update an item.
      operationId: ItemUpdate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                asset:
                  $ref: '#/components/schemas/assetEmbedding'
                fields:
                  items:
                    $ref: '#/components/schemas/field'
                  type: array
                metadataFields:
                  items:
                    $ref: '#/components/schemas/field'
                  type: array
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionedItem'
          description: An item
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Update an item.
      tags:
      - Items
  /items/{itemId}/comments:
    get:
      operationId: ItemCommentList
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  comments:
                    items:
                      $ref: '#/components/schemas/comment'
                    type: array
                type: object
          description: item comments list
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: get an item comment
      tags:
      - Items comments
    parameters:
    - $ref: '#/components/parameters/itemIdParam'
    post:
      operationId: ItemCommentCreate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                content:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
          description: ""
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: create an item comment
      tags:
      - Items comments
  /items/{itemId}/comments/{commentId}:
    delete:
      operationId: ItemCommentDelete
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                type: object
          description: delete an item comment
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: delete item comment
      tags:
      - Items comments
    parameters:
    - $ref: '#/components/parameters/itemIdParam'
    - $ref: '#/components/parameters/commentIdParam'
    patch:
      description: ""
      operationId: ItemCommentUpdate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                content:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
          description: Update An item comment
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: Update Item Comment
      tags:
      - Items comments
  /models/{modelId}:
    delete:
      operationId: ModelDelete
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                type: object
          description: delete a model
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
      summary: delete a model
      tags:
      - Models
    get:
      description: Returns a model.
      operationId: ModelGet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a model.
      tags:
      - Models
    parameters:
    - $ref: '#/components/parameters/modelIdParam'
    patch:
      description: Update a model.
      operationId: ModelUpdate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                key:
                  type: string
                name:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
          description: A JSON object of model
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
      summary: Update a model.
      tags:
      - Models
  /models/{modelId}/copy:
    parameters:
    - $ref: '#/components/parameters/modelIdParam'
    post:
      operationId: CopyModel
      requestBody:
        content:
          application/json:
            schema:
              properties:
                key:
                  type: string
                name:
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
          description: A JSON object of field
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Copy schema and items of a selected model
      tags:
      - Models
  /models/{modelId}/import:
    parameters:
    - $ref: '#/components/parameters/modelIdParam'
    put:
      operationId: ModelImport
      requestBody:
        content:
          application/json:
            schema:
              properties:
                assetId:
                  type: string
                format:
                  enum:
                  - geoJson
                  - json
                  type: string
                geometryFieldKey:
                  type: string
                mutateSchema:
                  type: boolean
                strategy:
                  enum:
                  - insert
                  - update
                  - upsert
                  type: string
              required:
              - assetId
              - format
              - strategy
              type: object
          multipart/form-data:
            schema:
              properties:
                file:
                  format: binary
                  type: string
                format:
                  enum:
                  - geoJson
                  - json
                  type: string
                geometryFieldKey:
                  type: string
                mutateSchema:
                  type: boolean
                strategy:
                  enum:
                  - insert
                  - update
                  - upsert
                  type: string
              required:
              - assetId
              - format
              - strategy
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  ignoredCount:
                    type: integer
                  insertedCount:
                    type: integer
                  itemsCount:
                    type: integer
                  modelId:
                    type: string
                  newFields:
                    items:
                      $ref: '#/components/schemas/schemaField'
                    type: array
                  updatedCount:
                    type: integer
                type: object
          description: A JSON object of import status
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Import data under the selected model
      tags:
      - Models
  /models/{modelId}/items:
    get:
      description: Returns a list of items with filtering and ordering.
      operationId: ItemFilter
      parameters:
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/sortDirParam'
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
      - $ref: '#/components/parameters/refParam'
      - $ref: '#/components/parameters/assetParam'
      - $ref: '#/components/parameters/keywordParam'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                filter:
                  $ref: '#/components/schemas/condition'
              type: object
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/versionedItem'
                    type: array
                  page:
                    minimum: 1
                    type: integer
                  perPage:
                    minimum: 1
                    type: integer
                  totalCount:
                    minimum: 0
                    type: integer
                type: object
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a list of items.
      tags:
      - Items
    parameters:
    - $ref: '#/components/parameters/modelIdParam'
    post:
      operationId: ItemCreate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                fields:
                  items:
                    $ref: '#/components/schemas/field'
                  type: array
                metadataFields:
                  items:
                    $ref: '#/components/schemas/field'
                  type: array
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionedItem'
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
      summary: create an item
      tags:
      - Items
  /models/{modelId}/items.csv:
    get:
      description: Returns a CSV that has a list of items as features.
      operationId: ItemsAsCSV
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
      - $ref: '#/components/parameters/refParam'
      responses:
        "200":
          content:
            text/csv:
              schema:
                format: binary
                type: string
          description: A string in CSV format
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a CSV that has a list of items as features.
      tags:
      - Items project
      - CSV
    parameters:
    - $ref: '#/components/parameters/modelIdParam'
  /models/{modelId}/items.geojson:
    get:
      description: Returns a GeoJSON that has a list of items as features.
      operationId: ItemsAsGeoJSON
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
      - $ref: '#/components/parameters/refParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJSON'
                format: binary
          description: A GeoJSON object
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a GeoJSON that has a list of items as features.
      tags:
      - Items
      - GeoJSON
    parameters:
    - $ref: '#/components/parameters/modelIdParam'
  /models/{modelId}/metadata_schema.json:
    get:
      description: Returns a metadata schema as json by model ID
      operationId: MetadataSchemaByModelAsJSON
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaJSON'
                format: binary
          description: A JSON object
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a metadata schema as json by model ID
      tags:
      - MetadataSchema
      - JSON
    parameters:
    - $ref: '#/components/parameters/modelIdParam'
  /models/{modelId}/schema.json:
    get:
      description: Returns a schema as json by model ID
      operationId: SchemaByModelAsJSON
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaJSON'
                format: binary
          description: A JSON object
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a schema as json by model ID
      tags:
      - Schema
      - JSON
    parameters:
    - $ref: '#/components/parameters/modelIdParam'
  /projects/{projectId}/assets:
    get:
      description: Returns a list of assets with filtering and ordering.
      operationId: AssetFilter
      parameters:
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/sortDirParam'
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
      - $ref: '#/components/parameters/keywordParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/asset'
                    type: array
                  page:
                    minimum: 1
                    type: integer
                  perPage:
                    minimum: 1
                    type: integer
                  totalCount:
                    minimum: 0
                    type: integer
                type: object
          description: assets list
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: Returns a list of assets.
      tags:
      - Assets project
    parameters:
    - $ref: '#/components/parameters/projectIdParam'
    post:
      description: Create a new asset and return the created asset.
      operationId: AssetCreate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                skipDecompression:
                  default: false
                  nullable: true
                  type: boolean
                token:
                  type: string
                url:
                  type: string
              type: object
          multipart/form-data:
            schema:
              properties:
                file:
                  format: binary
                  type: string
                skipDecompression:
                  default: false
                  type: boolean
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset'
          description: assets
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: Create an new asset.
      tags:
      - Assets project
  /projects/{projectId}/assets/uploads:
    post:
      description: Issue a URL and a token to upload an asset.
      operationId: AssetUploadCreate
      parameters:
      - $ref: '#/components/parameters/projectIdParam'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                contentLength:
                  type: integer
                cursor:
                  type: string
                name:
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  contentLength:
                    type: integer
                  contentType:
                    type: string
                  next:
                    type: string
                  token:
                    type: string
                  url:
                    type: string
                type: object
          description: asset upload
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
      security:
      - bearerAuth: []
      summary: Upload an asset.
      tags:
      - Assets project
  /projects/{projectIdOrAlias}/models:
    get:
      description: Returns a list of models.
      operationId: ModelFilter
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  models:
                    items:
                      $ref: '#/components/schemas/model'
                    type: array
                  page:
                    minimum: 1
                    type: integer
                  perPage:
                    minimum: 1
                    type: integer
                  totalCount:
                    minimum: 0
                    type: integer
                type: object
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a list of models.
      tags:
      - Models
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/pageParam'
    - $ref: '#/components/parameters/perPageParam'
    post:
      operationId: ModelCreate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                key:
                  type: string
                name:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
          description: A JSON object of model
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
      summary: create a model
      tags:
      - Models
  /projects/{projectIdOrAlias}/models/{modelIdOrKey}:
    delete:
      description: Delete a model.
      operationId: ModelDeleteWithProject
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                type: object
          description: The model id
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Delete a model.
      tags:
      - Models
    get:
      description: Returns a model.
      operationId: ModelGetWithProject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a model.
      tags:
      - Models
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/modelIdOrKeyParam'
    patch:
      description: Update a model.
      operationId: ModelUpdateWithProject
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                key:
                  type: string
                name:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
          description: A JSON object of model
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Update a model.
      tags:
      - Models
  /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields:
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/modelIdOrKeyParam'
    post:
      operationId: FieldCreateWithProject
      requestBody:
        content:
          application/json:
            schema:
              properties:
                key:
                  type: string
                multiple:
                  type: boolean
                required:
                  type: boolean
                type:
                  $ref: '#/components/schemas/valueType'
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaField'
          description: A JSON object of field
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
      summary: create a field
      tags:
      - Fields
  /projects/{projectIdOrAlias}/models/{modelIdOrKey}/fields/{fieldIdOrKey}:
    delete:
      description: Returns the field id.
      operationId: FieldDeleteWithProject
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                type: object
          description: A field id
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Delete a field.
      tags:
      - Fields
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/modelIdOrKeyParam'
    - $ref: '#/components/parameters/fieldIdOrKeyParam'
    patch:
      operationId: FieldUpdateWithProject
      requestBody:
        content:
          application/json:
            schema:
              properties:
                key:
                  type: string
                multiple:
                  type: boolean
                required:
                  type: boolean
                type:
                  $ref: '#/components/schemas/valueType'
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaField'
          description: A JSON object of field
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
      summary: update a field
      tags:
      - Fields
  /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items:
    get:
      description: Returns a list of items with filtering and ordering.
      operationId: ItemFilterWithProject
      parameters:
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/sortDirParam'
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
      - $ref: '#/components/parameters/refParam'
      - $ref: '#/components/parameters/assetParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/versionedItem'
                    type: array
                  page:
                    minimum: 1
                    type: integer
                  perPage:
                    minimum: 1
                    type: integer
                  totalCount:
                    minimum: 0
                    type: integer
                type: object
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a list of items.
      tags:
      - Items project
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/modelIdOrKeyParam'
    post:
      description: Create an Item.
      operationId: ItemCreateWithProject
      requestBody:
        content:
          application/json:
            schema:
              properties:
                fields:
                  items:
                    $ref: '#/components/schemas/field'
                  type: array
                metadataFields:
                  items:
                    $ref: '#/components/schemas/field'
                  type: array
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionedItem'
          description: A JSON array of user names
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
      summary: Create an Item.
      tags:
      - Items project
  /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.csv:
    get:
      description: Returns a CSV that has a list of items as features.
      operationId: ItemsWithProjectAsCSV
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
      - $ref: '#/components/parameters/refParam'
      responses:
        "200":
          content:
            text/csv:
              schema:
                format: binary
                type: string
          description: A string in CSV format
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a CSV that has a list of items as features.
      tags:
      - Items project
      - CSV
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/modelIdOrKeyParam'
  /projects/{projectIdOrAlias}/models/{modelIdOrKey}/items.geojson:
    get:
      description: Returns a GeoJSON that has a list of items as features.
      operationId: ItemsWithProjectAsGeoJSON
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/perPageParam'
      - $ref: '#/components/parameters/refParam'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJSON'
                format: binary
          description: A GeoJSON object
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a GeoJSON that has a list of items as features.
      tags:
      - Items project
      - GeoJSON
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/modelIdOrKeyParam'
  /projects/{projectIdOrAlias}/models/{modelIdOrKey}/metadata_schema.json:
    get:
      description: Returns a metadata schema as json by project and model ID
      operationId: MetadataSchemaByModelWithProjectAsJSON
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaJSON'
                format: binary
          description: A JSON object
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a metadata schema as json by project and model ID
      tags:
      - MetadataSchema
      - JSON
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/modelIdOrKeyParam'
  /projects/{projectIdOrAlias}/models/{modelIdOrKey}/schema.json:
    get:
      description: Returns a schema as json by project and model ID
      operationId: SchemaByModelWithProjectAsJSON
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaJSON'
                format: binary
          description: A JSON object
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a schema as json by project and model ID
      tags:
      - Schema
      - JSON
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/modelIdOrKeyParam'
  /projects/{projectIdOrAlias}/schemata:
    get:
      description: Returns a schema.
      operationId: SchemaFilter
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  models:
                    items:
                      $ref: '#/components/schemas/model'
                    type: array
                  page:
                    minimum: 1
                    type: integer
                  perPage:
                    minimum: 1
                    type: integer
                  totalCount:
                    minimum: 0
                    type: integer
                type: object
          description: A JSON array of schema objects
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a schema.
      tags:
      - Schemata
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/pageParam'
    - $ref: '#/components/parameters/perPageParam'
    - $ref: '#/components/parameters/keywordParam'
  /projects/{projectIdOrAlias}/schemata/{schemaId}/schema.json:
    get:
      description: Returns a schema as json by project and schema ID
      operationId: SchemaByIDWithProjectAsJSON
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaJSON'
                format: binary
          description: A JSON object
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a schema as json by project and schema ID
      tags:
      - Schema
      - JSON
    parameters:
    - $ref: '#/components/parameters/projectIdOrAliasParam'
    - $ref: '#/components/parameters/schemaIdParam'
  /schemata/{schemaId}/fields:
    parameters:
    - $ref: '#/components/parameters/schemaIdParam'
    post:
      operationId: FieldCreate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                key:
                  type: string
                multiple:
                  type: boolean
                required:
                  type: boolean
                type:
                  $ref: '#/components/schemas/valueType'
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaField'
          description: A JSON object of field
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
      summary: create a field
      tags:
      - Fields
  /schemata/{schemaId}/fields/{fieldIdOrKey}:
    delete:
      operationId: FieldDelete
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                type: object
          description: A JSON object of field
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
      summary: delete a field
      tags:
      - Fields
    parameters:
    - $ref: '#/components/parameters/schemaIdParam'
    - $ref: '#/components/parameters/fieldIdOrKeyParam'
    patch:
      operationId: FieldUpdate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                key:
                  type: string
                multiple:
                  type: boolean
                required:
                  type: boolean
                type:
                  $ref: '#/components/schemas/valueType'
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaField'
          description: A JSON object of field
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - bearerAuth: []
      summary: update a field
      tags:
      - Fields
  /schemata/{schemaId}/schema.json:
    get:
      description: Returns a schema as json by schema ID
      operationId: SchemaByIDAsJSON
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaJSON'
                format: binary
          description: A JSON object
        "400":
          description: Invalid request parameter value
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          description: Not found
        "500":
          description: Internal server error
      security:
      - bearerAuth: []
      summary: Returns a schema as json by schema ID
      tags:
      - Schema
      - JSON
    parameters:
    - $ref: '#/components/parameters/schemaIdParam'
